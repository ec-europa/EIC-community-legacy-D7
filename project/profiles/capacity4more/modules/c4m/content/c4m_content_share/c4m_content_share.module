<?php

/**
 * @file
 * Code for the Share content type feature.
 */

include_once 'c4m_content_share.features.inc';

/**
 * The access realm of C4M group shares.
 */
define('C4M_CONTENT_SHARE_ACCESS_REALM', 'c4m_content_share_access');

/**
 * Implements hook_menu().
 */
function c4m_content_share_menu() {
  $items = array();

  $items['node/%node/share'] = array(
    'title' => 'Share content to another group or project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_content_share_form'),
    'access callback' => 'c4m_content_share_access',
    'file' => 'c4m_content_share.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/share-from-outside'] = array(
    'title' => 'Share content to another group or project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_content_share_form'),
    'access callback' => TRUE,
    'file' => 'c4m_content_share.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['c4m-autocomplete-share-groups/%node'] = array(
    'title' => 'Available groups/projects for sharing content',
    'page callback' => '_c4m_content_share_groups_autocomplete_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns available group for sharing content in autocomplete text fields.
 *
 * @param object $node
 *   Id of the shred node.
 * @param string $string
 *   Input from the text field.
 */
function _c4m_content_share_groups_autocomplete_callback($node, $string = '') {
  $matches = [];

  $gid = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $field = field_info_field('og_group_ref');
  $instance = field_info_instance('node', 'og_group_ref', 'share');

  $handler = entityreference_get_selection_handler($field, $instance, 'node', NULL);
  $searched_groups = $handler->getReferencableEntities($string, 'CONTAINS', 10);
  if (!empty($searched_groups['group'])) {
    $groups = $searched_groups['group'];

    // Remove groups already shared TO.
    $groups_shared = c4m_content_share_get_shared_groups($node);
    foreach ($groups_shared as $id_shared) {
      if (!empty($groups[$id_shared])) {
        unset($groups[$id_shared]);
      }
    }

    foreach ($groups as $group_id => $group_label) {
      if ($group_id != $gid) {
        $matches[$group_label . ' (' . $group_id . ')'] = '<div class="reference-autocomplete">' . $group_label . '</div>';
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_menu_alter().
 */
function c4m_content_share_menu_alter(&$items) {
  // Don't allow direct shares.
  $items['node/add/share']['access callback'] = FALSE;
}

/**
 * Implements hook_c4m_content_actions_info().
 */
function c4m_content_share_c4m_content_actions_info() {
  return array(
    'action_share' => array(
      'context' => array('group'),
      'callback' => 'c4m_content_share_action_share',
      'weight' => '5',
    ),
  );
}

/**
 * Callback to show the share link.
 *
 * @param object $node
 *    The node object.
 *
 * @return string
 *    Rendered output of the share link.
 */
function c4m_content_share_action_share($node) {
  if (!c4m_og_user_is_member() || !og_is_group_content_type(
      'node',
      $node->type
    )
  ) {
    return '';
  }

  $context = og_context();

  $url = url(
    'node/' . $node->nid . '/share',
    array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $context['gid'],
      ),
    )
  );

  $output = '<div class="group-actions-share">' . l(
      '<i class="fa fa-retweet"></i><span class="action">' . t('Share to your groups/projects') . '</span>',
      $url, array('html' => TRUE)
    ) . '</div>';
  return $output;
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function c4m_content_share_search_api_index_items_alter(
  array &$items,
  SearchApiIndex $index
) {
  foreach ($items as $index => $item) {
    if (!isset($item->type)) {
      return;
    }

    if ($item->type == 'share') {
      // Do stuff.
      $node = entity_metadata_wrapper('node', $item);

      // Retrieve original node.
      $original_node = $node->c4m_source_entity->value();
      $index_fields = c4m_content_share_fields_info($original_node->type);

      foreach ($index_fields as $field) {
        if (is_array($field)) {
          // watchdog('c4m_content_share', 'field is array : %thearray',array('%thearray' => var_export($field, true)),'WATCHDOG_NOTICE');
          foreach ($field as $sub_field) {
            if (property_exists($original_node, $sub_field)) {
              $item->{$sub_field} = $original_node->{$sub_field};
            }
            // else {
              // watchdog('c4m_content_share', 'original node [<a href="/node/%nid">%nid</a>] does not have the (sub) property (sub_field) : %property',array('%nid' => $original_node->nid, "%property" =>$sub_field),'WATCHDOG_NOTICE');
            // }
          }
        }
        elseif (property_exists($original_node, $field)) {
          $item->{$field} = $original_node->{$field};
        }
        else {
          watchdog('c4m_content_share', 'original node [%nid] does not have the property (field) : %property',array('%nid' => $original_node->nid, '%field' => var_export($field, true)),'WATCHDOG_NOTICE');
        }
      }

      $item->original_node_type = 'share';

      $items[$index] = $item;
    }
  }
}

/**
 * Load all group features info from implemented c4m_og_feature hooks.
 *
 * @param string $bundle
 *   Only return data for a given content type (node bundle).
 *
 * @return array
 *   Configuration as collected trough the implemented
 *   hook_c4m_share_content_fields_info hooks.
 */
function c4m_content_share_fields_info($bundle = NULL) {
  $cache_key = 'c4m_content_share:fields_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $hook = 'c4m_content_share_fields_info';
      $data = module_invoke_all($hook);
      cache_set($cache_key, $data);
    }
  }

  // Only return data for a given feature.
  if (isset($data[$bundle])) {
    return $data[$bundle];
  }

  // Return all data.
  return $data;
}

/**
 * Implements hook_ds_fields_info().
 */
function c4m_content_share_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_share') . '/includes';

  $fields['node']['c4m_content_share_original_group'] = array(
    'title' => t('Original group'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('share|*'),
    'file' => $path . '/c4m_content_share.theme.inc',
    'function' => 'theme_c4m_content_share_original_group',
  );

  return $fields;
}

/**
 * Implements hook_node_view().
 */
function c4m_content_share_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'share' && $view_mode == 'full' && node_is_page($node)) {
    $access = node_access('view', $node);

    $host_entity = entity_metadata_wrapper('node', $node);
    $source_entity = entity_metadata_wrapper(
      'node',
      $host_entity->c4m_source_entity->value()
    );

    $redirect = 'node/' . $source_entity->nid->value();

    // If we share from outside the Group, articles.
    if ($host_entity->c4m_source_entity->value()->type == 'article') {
      drupal_goto($redirect);
    }
    else {
      $group_id = $source_entity->og_group_ref->nid->value();

      drupal_goto(
        $redirect,
        array(
          'purl' => array(
            'disabled' => FALSE,
            'provider' => "og_purl|node",
            'id' => $group_id,
          ),
        ),
        301
      );
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function c4m_content_share_node_delete($node) {
  // If a source/target group is deleted, the content within is deleted as well,
  // therefore these nodes will end up in the if cause below anyway.
  // If a source node is deleted, delete all messages/shares.
  if ($targets = _c4m_content_share_get_shared_targets($node)) {
    node_delete_multiple(array_keys($targets));
  }
}

/**
 * Get all the shares for a node (if any).
 *
 * @param object $node
 *   Drupal node entity object.
 *
 * @return array
 *   Result set or empty array if no shares found.
 */
function _c4m_content_share_get_shared_targets($node) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition('c4m_source_entity', 'target_id', $node->nid, '=');

  $result = $query->execute();
  if (isset($result['node'])) {
    return $result['node'];
  }

  return [];
}

/**
 * Access callback checks if the current user is group member.
 *
 * @return void|bool
 *   TRUE if the current user is group member, FALSE otherwise.
 */
function c4m_content_share_access() {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return
    // early. The next time this access callback will be called, it will not
    // enter here.
    og_context_access_callback_register_path($_GET['q']);

    return NULL;
  }

  return c4m_og_user_is_member();
}

/**
 * Implements hook_node_access().
 */
function c4m_content_share_node_access($node, $op, $account) {
  if (!is_object($node)) {
    return NODE_ACCESS_IGNORE;
  }

  if ($node->type == 'share' || ((isset($node->original_node_type) && $node->original_node_type == 'share'))) {
    // We index shares as their original content type (event, document...).
    // We change this type back to "share" for our manipulation, because Entity
    // API will not know the 'c4m_source_entity' field otherwise.
    $original_type = $node->type;
    $node->type = 'share';
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $original_node = $node_wrapper->c4m_source_entity->value();

    $original_access = node_access($op, $original_node, $account);

    $node->type = $original_type;

    if ($original_access === FALSE) {
      return NODE_ACCESS_DENY;
    }

    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_content_share_form_share_node_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  // Form ID covers both create/edit form,
  // but in our hook_menu_alter we already restrict access to the creation form.
  // Only allow access to update the description field.
  if (arg(2) === 'edit') {
    $form['title']['#access'] = FALSE;
    $form['c4m_source_entity']['#access'] = FALSE;
    $form['og_group_ref']['#access'] = FALSE;
  }
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_share_c4m_helper_entity_label_info() {
  return array(
    'share' => array(
      'article' => t('a'),
      'singular' => t('share'),
      'plural' => t('shares'),
      'insert action' => t('shared'),
      'update action' => t('updated'),
      'icon' => 'fa-retweet',
    ),
  );
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Create a custom realm we grant access to.
 *
 * ******************************* *
 * **** POSSIBLE COMBINATIONS **** *
 * ******************************* *
 * SOURCE ENTITY  |  TARGET ENTITY *
 * ------------------------------- *
 *      all       |      all       *
 *      all       | og_access:node *
 * og_access:node |      all       *
 * og_access:node | og_access:node *
 * ******************************* *
 */
function c4m_content_share_node_access_records_alter(&$grants, $node) {
  if ($node->type == 'share') {
    // Add a realm prefix to all default OG grants.
    // This allows to make special prefixed access queries, while disabling
    // these grants for regular access checks.
    foreach ($grants as &$grant) {
      $grant['realm'] = 'c4m_content_share:' . $grant['realm'];
    }

    $grants[] = array(
      'realm' => C4M_CONTENT_SHARE_ACCESS_REALM,
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

}

/**
 * Implements hook_node_update().
 *
 * When a node is updated, all its shares need their access records
 * recalculated. hook_node_update() might be too early for this.
 * See https://stackoverflow.com/a/24035797/246724
 *
 * A special implementation for hook_node_insert() is not needed, because a node
 * that was just created cannot have any shares.
 *
 * @param object $node
 *
 * @todo Only process sharable node types?
 */
function c4m_content_share_node_update($node) {

  try {
    $share_nids = _c4m_content_share_node_get_share_nids($node->nid);
  }
  catch (Exception $e) {
    watchdog(
      WATCHDOG_ERROR,
      "Failed to determine share nids for node @nid. Exception:\n@exception",
      array(
        '@nid' => $node->nid,
        '@exception' => _drupal_decode_exception($e),
      ));
    return;
  }

  if (array() === $share_nids) {
    return;
  }

  /* @see _c4m_content_share_recalculate_access_records() */
  drupal_register_shutdown_function('_c4m_content_share_recalculate_access_records', $share_nids);
}

/**
 * Recalculates access records for the share nodes.
 *
 * @param int[] $share_nids
 */
function _c4m_content_share_recalculate_access_records(array $share_nids) {

  $share_nodes = node_load_multiple($share_nids);

  foreach ($share_nodes as $share_node) {
    node_access_acquire_grants($share_node);
  }
}

/**
 * @param int|string $source_nid
 *   E.g. 123 or "123".
 *
 * @return int[]
 * @throws \Exception
 */
function _c4m_content_share_node_get_share_nids($source_nid) {

  $q = db_select('field_data_c4m_source_entity', 'f');
  $q->condition('f.entity_type', 'node');
  $q->condition('f.delta', 0);
  $q->condition('f.language', LANGUAGE_NONE);
  $q->condition('f.deleted', 0);
  $q->condition('f.c4m_source_entity_target_id', $source_nid);
  $q->addField('f', 'entity_id', 'share_nid');

  // Make sure the share node exists and has the correct type.
  $q->leftJoin('node', 'n', 'n.nid = f.entity_id');
  $q->condition('n.type', 'share');

  return _c4m_content_share_select_query_execute_and_fetch_int_column($q);
}

/**
 * Implements hook_node_grants_alter().
 *
 * @param int[][] $grants
 *   Format: $[$realm][] = $grant_id
 * @param object $account
 *   The user account object. Anonymous has ->uid === 0.
 * @param string $op
 *   One of 'view', 'update', 'delete', 'create'.
 */
function c4m_content_share_node_grants_alter(&$grants, $account, $op) {

  if ($op === 'view') {

    $known_grants = array_merge(['all' => [0]], $grants);

    $realm = C4M_CONTENT_SHARE_ACCESS_REALM;

    $grants[$realm] = _c4m_content_share_get_nids_with_access($known_grants);
  }
}

/**
 * @param int[][] $known_grants
 *   Format: $[$realm][] = $grant_id
 *
 * @return int[]
 *   Format: $[] = $nid
 */
function _c4m_content_share_get_nids_with_access(array $known_grants) {
  static $drupal_static_fast;

  if (NULL === $drupal_static_fast) {
    $drupal_static_fast['nids_by_cid'] = &drupal_static(__FUNCTION__, array());
  }
  $nids_by_cid = &$drupal_static_fast['nids_by_cid'];

  $cid = md5(serialize($known_grants));

  if (isset($nids_by_cid[$cid])) {
    return $nids_by_cid[$cid];
  }

  return $nids_by_cid[$cid] = _c4m_content_share_determine_nids_with_access($known_grants);
}

/**
 * @param int[][] $known_grants
 *   Format: $[$realm][] = $grant_id
 *
 * @return int[]
 *   Format: $[] = $nid
 */
function _c4m_content_share_determine_nids_with_access(array $known_grants) {

  $prefixed_grants = [];
  foreach ($known_grants as $realm => $gids) {
    $prefixed_grants['c4m_content_share:' . $realm] = $gids;
  }

  $q = db_select('field_data_c4m_source_entity', 'f');
  $q->condition('f.entity_type', 'node');
  $q->condition('f.delta', 0);
  $q->condition('f.language', LANGUAGE_NONE);
  $q->condition('f.deleted', 0);
  $q->addField('f', 'entity_id', 'share_nid');

  // Make sure the share node exists.
  $q->leftJoin('node', 'n', 'n.nid = f.entity_id');
  $q->condition('n.type', 'share');

  _c4m_content_share_select_query_check_node_grants(
    $q,
    'f.c4m_source_entity_target_id',
    $known_grants);

  _c4m_content_share_select_query_check_node_grants(
    $q,
    'f.entity_id',
    $prefixed_grants);

  try {
    $nids_with_access = _c4m_content_share_select_query_execute_and_fetch_int_column($q);
  }
  catch (Exception $e) {
    watchdog(
      WATCHDOG_ERROR,
      "Failed to determine share nids with access. Exception:\n@exception",
      array(
        '@exception' => _drupal_decode_exception($e),
      ));

    return array();
  }

  return $nids_with_access;
}

/**
 * @param \SelectQuery $q
 * @param string $nid_alias
 * @param int[][] $known_grants
 *   Format: $[$realm][] = $grant_id
 *
 * @see node_access()
 * @see _node_query_node_access_alter()
 */
function _c4m_content_share_select_query_check_node_grants(SelectQuery $q, $nid_alias, array $known_grants) {

  $subquery = db_select('node_access', 'na');
  $subquery->condition('na.grant_view', 1, '>=');
  $subquery->where("na.nid = $nid_alias");
  $subquery->addField('na', 'nid');

  // Make sure only existing nodes are included.
  $subquery->leftJoin('node', 'n', 'n.nid = na.nid');
  $subquery->isNotNull('n.nid');

  $or = db_or();
  foreach ($known_grants as $realm => $gids) {
    $or->condition(db_and()
      ->condition('na.realm', $realm)
      ->condition('na.gid', $gids, 'IN'));
  }

  if (count($or->conditions())) {
    $subquery->condition($or);
  }

  $q->exists($subquery);
}

/**
 * Implements hook_c4m_helper_entity_label_info_alter().
 */
function c4m_content_share_c4m_helper_entity_label_info_alter(
  &$label_info,
  $entity
) {
  if ($entity->type == 'share') {
    $node = entity_metadata_wrapper('node', $entity);
    $original_node = $node->c4m_source_entity->value();

    $original_label_info = c4m_helper_entity_label_info($original_node);

    $label_info['singular'] = $original_label_info['singular'];
    $label_info['article'] = $original_label_info['article'];
  }
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_share_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_groups_shared_content' => array(
      'type' => 'shared_content',
      'context' => 'group',
      'callback' => 'c4m_content_share_get_number_of_shared_content_per_group',
    ),
  );
}

/**
 * Get all the groups (nids) the node is shared to.
 *
 * @param object $node
 *   The drupal node object.
 *
 * @return array
 *   Array of group node ids the content is shared to.
 */
function c4m_content_share_get_shared_groups($node) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'share')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('c4m_source_entity', 'target_id', $node->nid, '=');

  $result = $query->execute();

  $group_ids = array();

  if (isset($result['node'])) {
    $share_ids = array_keys($result['node']);

    $shares = node_load_multiple($share_ids);

    foreach ($shares as $share) {
      $share = entity_metadata_wrapper('node', $share);
      $group_ids[] = $share->og_group_ref->value()->nid;
    }
  }

  return $group_ids;
}

/**
 * Retrieve the total sum of content shares within a group.
 *
 * Retrieve the total sum of content shares within a group.
 * If one node is shared multiple times, it is added to the sum multiple
 * times as well.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return int
 *   Total sum of content shares within a group.
 */
function c4m_content_share_get_number_of_shared_content_per_group($og_id) {
  $query = _c4m_content_share_get_shared_content_per_group_query($og_id);

  $shares = $query->countQuery()->execute()->fetchField();

  return $shares;
}

/**
 * Retrieve all the content that is shared within a group (not unique).
 *
 * Retrieve all the content that is shared within a group.
 * If one node is shared multiple times, it is added to the array multiple
 * times as well.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return array
 *   Shared content (not unique) in an associative array.
 */
function c4m_content_share_get_shared_content_per_group($og_id) {
  $query = _c4m_content_share_get_shared_content_per_group_query($og_id);

  $result = $query->execute();

  $shares = $result->fetchCol();

  return $shares;
}

/**
 * Helper function returns the selectquery to retrieve shared group content.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return \SelectQuery
 *   The selectquery object before execution.
 */
function _c4m_content_share_get_shared_content_per_group_query($og_id) {
  $query = db_select('node', 'node_source');

  $query->innerJoin(
    'field_data_c4m_source_entity',
    'field_source',
    'field_source.c4m_source_entity_target_id = node_source.nid'
  );

  $query->innerJoin(
    'node',
    'node_share',
    'field_source.entity_id = node_share.nid'
  );

  $query->innerJoin('og_membership', 'og', 'og.etid = node_source.nid');

  $query->fields('node_source', array('nid'))
    ->condition('og.gid', $og_id, '=');

  return $query;
}

/**
 * @param \SelectQuery $q
 * @param bool $unique
 *
 * @return int[]
 * @throws \Exception
 */
function _c4m_content_share_select_query_execute_and_fetch_int_column(SelectQuery $q, $unique = TRUE) {

  $stmt = $q->execute();

  if (!$stmt instanceof DatabaseStatementInterface) {
    throw new \Exception('$q->execute() did not return a database statement object.');
  }

  $integers_as_strings = $stmt->fetchCol();

  if ($unique) {
    $integers_as_strings = array_unique($integers_as_strings);
  }

  return _c4m_content_share_get_strings_as_integers($integers_as_strings);
}

/**
 * Converts an array of integer-like strings to an array of integers.
 *
 * This is useful to process values coming from a database.
 *
 * @param string[] $integers_as_strings
 *   E.g. array("123", "456").
 *
 * @return int[]
 *   E.g. array(123, 456).
 */
function _c4m_content_share_get_strings_as_integers(array $integers_as_strings) {

  if (array() === $integers_as_strings) {
    return array();
  }

  // Fastest way to convert string nids to integer.
  return json_decode('[' . implode(',', $integers_as_strings) . ']');
}
