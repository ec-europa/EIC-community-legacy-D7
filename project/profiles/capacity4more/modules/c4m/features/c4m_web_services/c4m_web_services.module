<?php

/**
 * @file
 * Code for the Web Services feature.
 */

include_once 'c4m_web_services.features.inc';

/**
 * Implements hook_menu().
 */
function c4m_web_services_menu() {
  return [
    'admin/config/services/organisations_and_members' => [
      'title' => 'Organisations and members Webservice settings',
      'description' => 'Manage the settings for the organisations and members Webservice.',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['c4m_web_services_admin_settings_general'],
      'access arguments' => ['administer webservices with SMED'],
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/c4m_web_services.admin.inc',
    ],
  ];
}

/**
 * Implements hook_permission().
 */
function c4m_web_services_permission() {
  return [
    'administer webservices with SMED' => [
      'title' => t('Administer webservices with SMED'),
    ],
  ];
}

/**
 * Implements hook_services_authentication_info().
 */
function c4m_web_services_services_authentication_info() {
  return [
    'title' => t('C4M - Request-specific token authorisation'),
    'description' => t('Request-specific token is sent in each request.'),
    'authenticate_call' => '_c4m_web_services_authenticate_call',
    'security_settings' => '_c4m_web_services_security_settings',
    'default_security_settings' => '_c4m_web_services_default_security_settings',
  ];
}

/**
 * Authorises a call using request-specific token to verify the request.
 *
 * @param array $settings
 *   The settings for the authorisation module.
 * @param array $method
 *   The method that's being called.
 * @param array $args
 *   The arguments that are being used to call the method.
 *
 * @return null|string
 *   Returns nothing, or a error message if authorisation fails.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_authenticate_call(array $settings, array $method, array $args) {
  // Get the original request body.
  $endpoint_path = services_get_server_info('endpoint_path', '');
  $context = new ServicesContext($endpoint_path);
  $context->buildFromGlobals();

  $arguments = _c4m_web_services_array_flatten($args);

  $valid_token = FALSE;
  // Check if the header contains the authorization token.
  if (NULL !== $context->getServerVariable("HTTP_AUTHORIZATIONTOKEN")) {
    if ($context->getServerVariable("HTTP_AUTHORIZATIONTOKEN") === $settings["authorization_token_key"]) {
      $valid_token = TRUE;
    }
  }
  else {
    // Get the original request body.
    foreach ($arguments as $key => $one) {
      if ($key == $settings["authorization_token_name"] && $one == $settings["authorization_token_key"]) {
        $valid_token = TRUE;
        break;
      }
    }
  }

  if (!$valid_token) {
    return t('Invalid token value.');
  }

  // Open session for Admin user to edit/create content.
  global $user;
  drupal_save_session(FALSE);
  $user = user_load_by_name('dashboard_user');
  if (empty($user)) {
    return t('Dashboard user not available, contact site administrator.');
  }
}

/**
 * Returns an associative array of Form API elements for a settings form.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_default_security_settings() {
  return [
    'authorization_token_name' => 'AuthorizationToken',
    'authorization_token_key' => variable_get('c4m_web_services_general_authorization_token_key', ''),
  ];
}

/**
 * Returns an array with the default settings for the auth module.
 *
 * @see c4m_web_services_services_authentication_info()
 */
function _c4m_web_services_security_settings($settings, &$form_state) {
  $form = [];

  $form['authorization_token_name'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Name'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_name'],
  ];

  $form['authorization_token_key'] = [
    '#type' => 'textfield',
    '#title' => t('Authorization Token Key'),
    '#required' => TRUE,
    '#default_value' => $settings['authorization_token_key'],
  ];

  return $form;
}

/**
 * Helper function for flattening an array.
 */
function _c4m_web_services_array_flatten($array = NULL) {
  $result = [];

  if (!is_array($array)) {
    $array = func_get_args();
  }

  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $result = array_merge($result, _c4m_web_services_array_flatten($value));
    }
    else {
      $result = array_merge($result, [$key => $value]);
    }
  }

  return $result;
}

/**
 * Implements hook_services_resources().
 */
function c4m_web_services_services_resources() {
  $node_resource = [
    'node' => [
      'operations' => [
        'c4m_update' => [
          'file' => [
            'type' => 'inc',
            'module' => 'c4m_web_services',
            'name' => 'resources/c4m_web_services_node_resource',
          ],
          'callback' => '_c4m_web_services_node_resource_update',
          'args' => [
            [
              'name' => 'dashboard_id',
              'optional' => FALSE,
              'source' => ['path' => 0],
              'type' => 'text',
              'description' => 'The dashboard id of the node to update',
            ],
            [
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to update',
              'type' => 'array',
            ],
          ],
          'access callback' => '_c4m_node_resource_access',
          'access arguments' => ['update'],
          'access arguments append' => TRUE,
        ],
      ],
    ],
  ];

  return $node_resource;
}

/**
 * Implements hook_server_info().
 */
function c4m_web_services_server_info() {
  return [
    'name' => 'C4M REST',
    'path' => 'rest',
    'settings' => [
      'file' => ['inc', 'rest_server'],
      'form' => '_rest_server_settings',
      'submit' => '_rest_server_settings_submit',
    ],
  ];
}

/**
 * Starting point of the REST server.
 */
function c4m_web_services_server() {
  module_load_include('inc', 'c4m_web_services', 'includes/C4MServicesRESTServerFactory');
  module_load_include('inc', 'c4m_web_services', 'includes/C4MRESTServer');
  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');

  $services_rest_server_factory = 'C4MServicesRESTServerFactory';
  $rest_server_factory = new $services_rest_server_factory(['endpoint_path' => $endpoint_path]);
  /* @var $rest_server C4MRESTServer */
  $rest_server = $rest_server_factory->getRESTServer();

  $canonical_path = $rest_server->getCanonicalPath();
  if (empty($canonical_path)) {
    $endpoint_name = services_get_server_info('endpoint', '');
    $endpoint = services_endpoint_load($endpoint_name);
    return t('Services Endpoint "@name" has been setup successfully.', ['@name' => $endpoint->name]);
  }

  try {
    return $rest_server->handle();
  }
  catch (Exception $e) {
    $rest_server->handleException($e);
  }
}

/**
 * Look for the taxonomy terms and update the arguments array for organisations.
 *
 * @param array $controller
 *   Controller definition.
 * @param array $args
 *   Array of arguments.
 * @param array $options
 *   Options.
 *
 * @see services_controller_execute()
 * @see services.runtime.inc
 */
function c4m_web_services_services_request_preprocess_alter(array $controller, array &$args, array $options) {
  if (isset($options['resource']) && $options['resource'] == "node") {
    // Check by dashboard_id when Creating a new Organisation if already exists.
    if (isset($controller["callback"]) && $controller["callback"] === '_node_resource_create') {
      foreach ($args as &$arg) {
        if (is_array($arg) && isset($arg['c4m_organisation_dashboard_id']) && isset($arg['c4m_organisation_dashboard_id'][LANGUAGE_NONE][0]['value'])) {
          $node = c4m_web_services_get_existing_node($arg['c4m_organisation_dashboard_id'][LANGUAGE_NONE][0]['value']);
          if (empty($node)) {
            continue;
          }
          $xml = new SimpleXMLElement('<organisation_node_exists/>');
          $xml->addChild('organisation_name', $node->title);
          $xml->addChild('nid', $node->nid);
          $xml->addChild('c4m_organisation_dashboard_id', $arg['c4m_organisation_dashboard_id'][LANGUAGE_NONE][0]['value']);
          $xml->addChild('uri', url($node->purl, ['absolute' => TRUE]));
          throw new ServicesException($xml->asXML(), 302);
        }
      }
    }
    // Get all Taxonomy Fields of Organisation CT.
    $organisation_taxonomy_fields = field_read_fields([
      'entity_type' => 'node',
      'bundle' => 'organisation',
      'type' => 'taxonomy_term_reference',
    ]);

    if (empty($organisation_taxonomy_fields)) {
      return;
    }

    // Override the Taxonomy Term Names with Term ids.
    foreach ($args as &$arg) {
      if (is_array($arg)) {
        foreach ($arg as $field_name => &$item) {
          if (is_array($item) && isset($organisation_taxonomy_fields[$field_name]) && isset($item[LANGUAGE_NONE])) {
            $new_terms = [];
            foreach ($item[LANGUAGE_NONE] as $term_key) {
              if (!empty($term_key)) {
                // If term cannot be found, throw error and stop the process.
                if (isset($organisation_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary']) && $loaded = c4m_web_services_taxonomy_get_term_by_key($term_key, $organisation_taxonomy_fields[$field_name]['settings']['allowed_values'][0]['vocabulary'])) {
                  foreach ($loaded as $tid => $term) {
                    // Check if the term has parents and add them aswell.
                    // taxonomy_get_parents_all will always return at least the
                    // current taxonomy term.
                    if (!empty($term_and_or_parents = taxonomy_get_parents_all($tid))) {
                      foreach ($term_and_or_parents as $term_and_or_parent) {
                        // Only add the new tid if not existing already.
                        if (!empty($term_and_or_parent->tid) && !in_array($term_and_or_parent->tid, $new_terms)) {
                          $new_terms[] = $term_and_or_parent->tid;
                        }
                      }
                    }
                  }
                }
                else {
                  // Term with name not found, throw error.
                  // Indicate the field they tried to populate with the term
                  // that was not found.
                  $message = t('Error when searching for taxonomy term with key: @term_key. Term was intended for field @field_name.', [
                    '@field_name' => $field_name,
                    '@term_key' => $term_key,
                  ]);
                  throw new ServicesException($message, 404);
                }
              }
            }
            if (empty($new_terms)) {
              continue;
            }
            $item[LANGUAGE_NONE] = $new_terms;
          }
        }
      }
    }
  }

}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function c4m_web_services_services_request_postprocess_alter($controller, $args, &$result) {
  foreach ($args as $arg) {
    if (!is_array($arg)) {
      continue;
    }
    if ($arg['type'] != "organisation") {
      continue;
    }
    if (empty($nid = $result['nid'])) {
      continue;
    }

    // When creating a new node, publish it and set default paragraphs.
    if (!empty($controller['callback']) && $controller['callback'] === '_node_resource_create') {
      c4m_web_services_publish_organisation_set_paragraphs($nid, $arg);
    }

    // Create the organisation members.
    if (isset($arg['c4m_organisation_members']) && !empty($c4m_organisation_members = $arg['c4m_organisation_members'][LANGUAGE_NONE])) {
      $c4m_organisation_members = c4m_web_services_process_users_array($c4m_organisation_members);
      c4m_web_services_add_organisation_members($c4m_organisation_members, $nid);
    }

    // Add the contact persons.
    if (isset($arg['c4m_contact_persons']) && !empty($c4m_contact_persons = $arg['c4m_contact_persons'][LANGUAGE_NONE])) {
      $c4m_contact_persons = c4m_web_services_process_users_array($c4m_contact_persons);
      c4m_web_services_add_contact_persons($c4m_contact_persons, $nid);
    }
  }
}

/**
 * Helper function for adding emails as keys for every user.
 */
function c4m_web_services_process_users_array($rest_users) {
  if (!$rest_users) {
    return;
  }
  $nre = [];
  foreach ($rest_users as $rest_user) {
    $nre[strtolower($rest_user['email'])] = $rest_user;
  }
  unset($rest_users);
  return $nre;
}

/**
 * Helper function for adding users to the c4m_contact_persons field.
 *
 * @param array $contact_persons
 *   The array of users to be set as contact persons.
 * @param int $nid
 *   The nid of the created organisation.
 */
function c4m_web_services_add_contact_persons(array $contact_persons, $nid) {
  if (empty($contact_persons) && empty($nid)) {
    return;
  }

  $users = c4m_web_services_get_or_add_user($contact_persons);

  // Add these users to the c4m_contact_persons field.
  if (empty($users)) {
    return;
  }
  $node = node_load($nid);

  // Create an array with the new uids.
  $new_users = [];
  foreach ($users as $user) {
    // Update job title, user type and language fields that areon the user
    // Entity. These are kept on user for facets.
    c4m_web_services_update_user_taxonomies($user, $contact_persons[$user->mail]);

    $new_users[] = ['target_id' => $user->uid];
  }
  if (!empty($new_users)) {
    $node->c4m_contact_persons[LANGUAGE_NONE] = $new_users;
  }
  node_save($node);
}

/**
 * Helper function for adding users as members to a Group - Organisation.
 *
 * @param array $c4m_organisation_members
 *   The array of users to be set as members of the organisation.
 * @param int $nid
 *   The nid of the created organisation.
 */
function c4m_web_services_add_organisation_members(array $c4m_organisation_members, $nid) {
  if (empty($c4m_organisation_members) && empty($nid)) {
    return;
  }

  $new_members = c4m_web_services_get_or_add_user($c4m_organisation_members);

  if (empty($new_members)) {
    return;
  }

  // Get the user that is the manager of the Organisation and assign membership.
  $manager_users = [];
  foreach ($c4m_organisation_members as $c4m_organisation_member) {
    // Check and add Job Title based on Dashboard Id.
    if (isset($c4m_organisation_member['c4m_user_types']) && isset($c4m_organisation_member['c4m_user_types'][LANGUAGE_NONE]) && $term_owners = taxonomy_get_term_by_name('Organisation account owner')) {
      foreach ($term_owners as $term_owner) {
        if (isset($term_owner->c4m_dashboard_key[LANGUAGE_NONE]) && isset($term_owner->c4m_dashboard_key[LANGUAGE_NONE][0]['value']) && in_array($term_owner->c4m_dashboard_key[LANGUAGE_NONE][0]['value'], $c4m_organisation_member['c4m_user_types'][LANGUAGE_NONE])) {
          $manager_users[] = $c4m_organisation_member['email'];
        }
      }
    }
  }

  // Find users that are no longer member of the organisation and remove them.
  $old_member_ids = c4m_og_get_group_member_ids($nid);
  foreach ($new_members as $member) {
    $users[$member->uid] = $member;
  }
  foreach ($old_member_ids as $uid) {
    if (empty($users[$uid])) {
      og_ungroup('node', $nid, 'user', $uid);
    }
  }

  foreach ($users as $user) {
    // Make sure that the user is active when it's bootstrapped for an
    // organisation. This needs to happen before adding the group membership.
    if (!$user->status) {
      user_save($user, ['status' => C4M_USER_STATUS_ACTIVE]);
    }

    // Add the user to the group.
    $membership = og_group('node', $nid, ['entity' => $user]);

    if (!empty($membership)) {
      // Add jobtitle and user type for user in Organisation to Membership.
      // Check and add Job Title based on Dashboard Id.
      if (isset($c4m_organisation_members[$user->mail]['c4m_vocab_job_title']) && isset($c4m_organisation_members[$user->mail]['c4m_vocab_job_title'][LANGUAGE_NONE])) {
        $c4m_vocab_job_title = [];
        foreach ($c4m_organisation_members[$user->mail]['c4m_vocab_job_title'][LANGUAGE_NONE] as $job_title) {
          if (!empty($terms = c4m_web_services_taxonomy_get_term_by_key($job_title, 'c4m_job_titles'))) {
            $c4m_vocab_job_title[] = ['tid' => array_keys($terms)[0]];
          }
        }
        // Update membership with specific job title to this Organisation.
        $membership->c4m_vocab_job_title = [
          LANGUAGE_NONE => $c4m_vocab_job_title,
        ];
      }

      // Check and add User Type based on Dashboard Id.
      if (isset($c4m_organisation_members[$user->mail]['c4m_user_types']) && isset($c4m_organisation_members[$user->mail]['c4m_user_types'][LANGUAGE_NONE])) {
        $c4m_user_types = [];
        foreach ($c4m_organisation_members[$user->mail]['c4m_user_types'][LANGUAGE_NONE] as $user_type) {
          if (!empty($terms = c4m_web_services_taxonomy_get_term_by_key($user_type, 'c4m_vocab_user_types'))) {
            $c4m_user_types[] = ['tid' => array_keys($terms)[0]];
          }
        }
        $membership->c4m_user_types = [
          LANGUAGE_NONE => $c4m_user_types,
        ];
      }
      $membership->save();


      $user_current_roles = og_get_user_roles('node', $nid, $user->uid);

      // Add membership role if not exists.
      $role = c4m_og_user_role_load_by_name('member', 'organisation');
      if (!key_exists($role->rid,$user_current_roles)) {
        og_role_grant('node', $nid, $user->uid, $role->rid);
      }
      // Add administrator role.
      $role = c4m_og_user_role_load_by_name('administrator member', 'organisation');
      if (in_array($user->mail, $manager_users)) {
        og_role_grant('node', $nid, $user->uid, $role->rid);
      }
      else {
        // only need to revoke, if they have the role
        if (key_exists($role->rid,$user_current_roles)) {
          og_role_revoke('node', $nid, $user->uid, $role->rid);
        }
      }
      // Send welcome to Group notification.
      _c4m_user_notifications_notify_user_og_group_membership_accepted($membership);
    }
    // Update job title, user type and language fields that areon the user
    // Entity. These are kept on user for facets.
    c4m_web_services_update_user_taxonomies($user, $c4m_organisation_members[strtolower($user->mail)], $nid);
  }
}

/**
 * Gets or creates new users that are sent through the WS.
 *
 * @param array $rest_users
 *   The array of users sent through the WS.
 *
 * @return array
 *   List of users, existing and new ones.
 */
function c4m_web_services_get_or_add_user(array $rest_users) {
  if (empty($rest_users)) {
    return [];
  }
  $users = [];
  foreach ($rest_users as $key => $rest_user) {
    // First check if all the mandatory data is in the user array.
    // $rest_user['ecas_id'] can be empty when users are pushed through the WS.
    // If it's not empty, we use it as the username in Drupal.
    if (empty($rest_user['first_name']) || empty($rest_user['last_name']) || empty($rest_user['email'])) {
      continue;
    }
    // Check if the user already exists by searching for his email.
    if ($user = user_load_by_mail($rest_user['email'])) {
      $users[] = $user;
    }
    else {
      // Otherwise, new user needs to be created and set the authmap for them.
      $new_user_data = [
        'name' => _c4m_web_services_return_valid_name($rest_user['first_name'] . ' ' . $rest_user['last_name']),
        'pass' => user_password(),
        'mail' => $rest_user['email'],
        'c4m_first_name' => [LANGUAGE_NONE => [['value' => $rest_user['first_name']]]],
        'c4m_last_name' => [LANGUAGE_NONE => [['value' => $rest_user['last_name']]]],
        'init' => $rest_user['email'],
        'created' => time(),
        'status' => TRUE,
      ];

      // Create new user.
      $new_user = user_save(drupal_anonymous_user(), $new_user_data);

      if (empty($new_user)) {
        continue;
      }

      // Set Authmap record for this newly created user.
      user_set_authmaps($new_user, ['authname_ecas' => $rest_user['email']]);

      $users[] = $new_user;
    }
  }
  return $users;
}

/**
 * Helper function for updating taxonomies on user - kept for facets.
 */
function c4m_web_services_update_user_taxonomies($user, $rest_user, $nid = 0) {
  if (empty($user) || empty($rest_user) || empty($nid)) {
    return;
  }
  $other_groups = [];
  if (!empty($user->og_user_node[LANGUAGE_NONE])) {
    foreach ($user->og_user_node[LANGUAGE_NONE] as $one) {
      if ($one['target_id']) {
        $other_groups[] = $one['target_id'];
      }
    }
  }
  if (empty($other_groups)) {
    (!empty($nid)) ? $user->og_user_node[LANGUAGE_NONE][] = ['target_id' => $nid] : '';
  }
  elseif (!empty($nid) && !in_array($nid, $other_groups)) {
    (!empty($nid)) ? $user->og_user_node[LANGUAGE_NONE][] = ['target_id' => $nid] : '';
  }

  // Check and add Spoken Languages based on Dashboard Id.
  if (isset($rest_user['c4m_vocab_language']) && isset($rest_user['c4m_vocab_language'][LANGUAGE_NONE])) {
    $c4m_vocab_language = [];
    foreach ($rest_user['c4m_vocab_language'][LANGUAGE_NONE] as $language) {
      if (!empty($terms = c4m_web_services_taxonomy_get_term_by_key($language, 'c4m_vocab_language'))) {
        $c4m_vocab_language[] = ['tid' => array_keys($terms)[0]];
      }
    }
    $user->c4m_vocab_language[LANGUAGE_NONE] = $c4m_vocab_language;
  }

  // Get user group memberships and create an array with all user types and job
  // titles the user has.
  $user_types = [];
  $job_titles = [];
  foreach (c4m_user_og_get_groups($user, 'organisation') as $organisation) {
    $membership = og_get_membership('node', $organisation->nid, 'user', $user->uid);
    if (!empty($membership->c4m_user_types) && !empty($membership->c4m_user_types[LANGUAGE_NONE])) {
      // Override duplicates with samekey in array.
      foreach ($membership->c4m_user_types[LANGUAGE_NONE] as $user_type) {
        $user_types[$user_type['tid']] = $user_type['tid'];
      }
    }
    if (!empty($membership->c4m_vocab_job_title) && !empty($membership->c4m_vocab_job_title[LANGUAGE_NONE])) {
      // Override duplicates with samekey in array.
      foreach ($membership->c4m_vocab_job_title[LANGUAGE_NONE] as $job_title) {
        $job_titles[$job_title['tid']] = $job_title['tid'];
      }
    }
  }

  if (!empty($user_types)) {
    $c4m_user_types = [];
    foreach ($user_types as $ut) {
      $c4m_user_types[] = ['tid' => $ut];
    }
    $user->c4m_user_types[LANGUAGE_NONE] = $c4m_user_types;
  }

  if (!empty($job_titles)) {
    $c4m_vocab_job_title = [];
    foreach ($job_titles as $jt) {
      $c4m_vocab_job_title[] = ['tid' => $jt];
    }
    $user->c4m_vocab_job_title[LANGUAGE_NONE] = $c4m_vocab_job_title;
  }

  user_save($user);
}

/**
 * Helper function that returns a valid username.
 *
 * @param string $name
 *   The full name.
 *
 * @return string
 *   A valid username.
 */
function _c4m_web_services_return_valid_name($name) {
  $counter = 1;
  $name_to_check = $name;

  while (_c4m_web_services_check_unique_name($name_to_check)) {
    $name_to_check = $name . $counter;
    $counter++;
  }

  return $name_to_check;
}

/**
 * Helper function that checks for unique username.
 *
 * @param string $name
 *   The full name.
 *
 * @return bool
 *   True if the username is unique.
 */
function _c4m_web_services_check_unique_name($name) {
  $query = db_select('users')
    ->fields('users', ['name'])
    ->condition('name', $name, '=');

  return (bool) $query->execute()->fetchAssoc();
}

/**
 * Try to map a dashboard key to an existing term..
 *
 * @param string $dashboard_key
 *   Dashboard key of the term to search for.
 * @param string $vocabulary
 *   Vocabulary machine name to limit the search.
 * @param string $taxonomy_fieldname
 *   The
 * @return array
 *   An array of matching term objects.
 */
function c4m_web_services_taxonomy_get_term_by_key($dashboard_key, $vocabulary, $taxonomy_fieldname = 'c4m_dashboard_key') {
  $terms = [];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $vocabulary)
    ->fieldCondition($taxonomy_fieldname, 'value', $dashboard_key, '=')
    ->range(0, 10)
    ->addMetaData('account', user_load_by_name('dashboard_user'));

  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
  }
  return $terms;
}

/**
 * Try to map a dashboard id to an existing node.
 *
 * @param int $organisation_dashboard_id
 *   Dashboard id of the node.
 *
 * @return bool|object
 *   A node object. FALSE if no node found.
 */
function c4m_web_services_get_existing_node($organisation_dashboard_id) {
  $node = FALSE;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'organisation')
    ->fieldCondition('c4m_organisation_dashboard_id', 'value', $organisation_dashboard_id, '=')
    ->range(0, 1)
    ->addMetaData('account', user_load_by_name('dashboard_user'));

  $result = $query->execute();
  if (isset($result['node'])) {
    $node = array_shift($result['node']);
    $node = node_load($node->nid);
  }
  return $node;
}

/**
 * Alter the newly created node, publish it and set default paragraphs.
 *
 * @param int $nid
 *   The organisation node id.
 * @param array $arg
 *   The organisation info.
 */
function c4m_web_services_publish_organisation_set_paragraphs($nid, array $arg) {
  if ($arg['type'] !== "organisation") {
    return;
  }
  $node = node_load($nid);
  if (empty($node)) {
    return;
  }

  // When adding through the WS, organisation should be Approved and Published.
  $node->c4m_og_status[LANGUAGE_NONE][0]['value'] = 'published';

  // Add default text to the About us field.
  if (!empty($arg['c4m_about_us'])) {
    $node->field_c4m_about_us[LANGUAGE_NONE][0]['format'] = $arg['c4m_about_us'][LANGUAGE_NONE][0]['format'];
    $node->field_c4m_about_us[LANGUAGE_NONE][0]['value'] = $arg['c4m_about_us'][LANGUAGE_NONE][0]['value'];
  }
  else {
    $node->field_c4m_about_us[LANGUAGE_NONE][0]['format'] = 'filtered_html';
    $node->field_c4m_about_us[LANGUAGE_NONE][0]['value'] = '<p>' . t('You will find here a description of our company soon. Please visit our website in the meanwhile.') . '</p>';
  }

  // Set paragraphs for left column.
  $node_field = 'c4m_left_column';
  $paragraph_bundle = 'c4m_paragraph_system_block';
  // About us block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_about_us';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('About us');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Latest news block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'views:c4m_project_news-block';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('Latest news');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Latest activity block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_as';
  $paragraph->c4m_heading[LANGUAGE_NONE][0]['value'] = t('Latest activity');
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Set paragraphs for right column.
  $node_field = 'c4m_right_column';
  // About this organisation block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_about';
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Customers block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_customers';
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Partners block.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_partners';
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Organisation's groups.
  $paragraph = new ParagraphsItemEntity([
    'field_name' => $node_field,
    'bundle' => $paragraph_bundle,
  ]);
  $paragraph->is_new = TRUE;
  $paragraph->setHostEntity('node', $node);
  $paragraph->c4m_block[LANGUAGE_NONE][0]['moddelta'] = 'c4m_content_organisation:c4m_block_organisation_groups';
  $paragraph->c4m_number_of_items[LANGUAGE_NONE][0]['value'] = 5;
  $paragraph->save(TRUE);

  // Save the node.
  node_save($node);
}
