<?php

/**
 * @file
 * Code for the Public basic access to platform feature.
 */

/**
 * The ScaleUp EU node id
 */
define('SCALEUP_NODEPATH', "node/6092");

include_once 'c4m_public_access.features.inc';

/**
 * Implements hook_perm().
 */
function c4m_public_access_permission() {
  return array(
    'administer public access settings' => array(
      'title' => t('Administer public access settings'),
      'description' => t('Administer public access settings.'),
    ),
    'access authenticated content' => array(
      'title' => t('View published content as an authenticated user'),
      'description' => t('Allow to limit viewing published content.'),
    ),
  );
}

function c4m_public_access_menu() {
  $items = array();
  $items['member_access'] = array(
    'title' => 'Member access',
    'page callback' => '_member_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/public_access'] = array(
  'title' => 'Manage public access settings',
  'description' => 'manage which (book) pages, shall be visible for anonymous users',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('c4m_public_access_admin_settings_general'),
  'access arguments' => array('administer public access settings'),
  'type' => MENU_NORMAL_ITEM,
  'file' => 'includes/public_access.admin.inc',
  );
  return $items;
}


function _member_access() {
  if (user_is_anonymous()) {
    return c4m_user_access_denied_ecas();
  }
  else {
    drupal_goto('<front>');
  }
}

/**
 * Implements hook_block_view_alter().
 */
function c4m_public_access_block_view_alter(&$data, $block) {
  if (user_is_logged_in()) {
    return;
  }
  if (!property_exists($block, 'context') || $block->context != 'c4m_context_og_menu') {
    // Not the desired context.
    return;
  }
  foreach ($data['content'] as $key => $value) {
    if (is_integer($key) && $value["#attributes"]["class"][0] !== "first") {
      unset($data['content'][$key]);
    }
  }
}
/**
 * Implements hook_node_access().
 *
 * @param $node
 * @param $account
 *
 * @return string
 */
function c4m_public_access_node_access($node, $op, $account) {
  // anonymous users can only see the about us page (for books) , articles and event-sites.
  if ($account->uid === 0) {
    if ($op !== "view") {
      return NODE_ACCESS_DENY;
    }
    if (!in_array($node->type, ['article', 'book', 'event_site']) ) {
      return NODE_ACCESS_DENY;
    }
    if ($node->type == 'article'){
      if (!empty($node->group_group)) {
        return NODE_ACCESS_DENY;
      }
    }

    if ($node->type == "book") {
      //only allow the book pages that are allowed and the whole help-guidance section.
      $public_access_settings = variable_get('public_access_settings', array());
      $stored_public_nodes = json_decode($public_access_settings['stored_nodes']);
      if (in_array($node->nid, $stored_public_nodes ) or strpos(drupal_get_path_alias($_GET['q']),'help-guidance') !== False) {
//      if ($node->title === "About Us" or strpos(drupal_get_path_alias($_GET['q']),'help-guidance') !== False ) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }

    // Only allow event_sites with published og_status and non empty dashboard_id
    if ($node->type == "event_site") {
      if ($node->c4m_og_status["und"][0]["value"] !== "published" || empty($node->c4m_event_dashboard_id[LANGUAGE_NONE][0]["value"])) {
        return NODE_ACCESS_DENY;
      }

      // disable in event_sites also the sub items.
      if (in_array(current_path(), ["documents","discussions", "news", "media", "members"])) {
        return NODE_ACCESS_DENY;
      }
    }
  }

}


/**
 * Lets modules alter a Solr search request before sending it.
 *
 * Limit events for anonymous to only coming from the webservice.
 *
 * @param array $call_args
 *   An associative array containing all three arguments to the
 *   SearchApiSolrConnectionInterface::search() call ("query", "params" and
 *   "method") as references.
 * @param SearchApiQueryInterface $query
 *   The SearchApiQueryInterface object representing the executed search query.
 */
function c4m_public_access_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  if (user_is_anonymous()) {
    $search_pages = array("search_api_views:c4m_overview_events_landing:page" ,
                          "search_api_views:c4m_overview_events_landing:attachment_1",
                          "search_api_views:c4m_overview_events:page",
                          "search_api_views:c4m_overview_events:page_1");
    if (in_array($query->getOption('search id'), $search_pages) ) {
      $new_filters = array('ss_c4m_og_status:"published"', 'is_c4m_event_dashboard_id:[* TO *]');
      // Want to add before the index_id and hash
      foreach($new_filters as $new_filter) {
        $position = count($call_args['params']['fq']) - 2;
        array_splice($call_args['params']['fq'], $position, 0, $new_filter);
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter.
 * Hide the writers first and last in the results.
 *
 * @param $build
 * @param $type
 */

function c4m_public_access_entity_view_alter(&$build, $type) {
  if (user_is_anonymous() && $build['#bundle'] == 'article') {
    if (isset($build["c4m_user_first_and_last_name"])) {
      $build["c4m_user_first_and_last_name"][0]["#markup"]="<span class='user-name'>The EIC </span>";
    }

  }

}

/**
 * Implements hook_views_query_alter().
 *
 * Filter the activity stream by the user's choice.
 */

function c4m_public_access_views_query_alter(&$view, &$query)
{
  if (!(user_is_anonymous() && $view->name == 'global_activity_stream_no_js_fallback')) {
    return;
  }
  // We limit what the anonymous visitor can see in the activity stream.
  $query->where[1]["conditions"][1]["value"] = array("c4m_insert__node__article");
}

/**
 * Implements hook_views_module_implements_alter().
 * To make sure the access check of this module is done after the other ones.
 */
function c4m_public_access_module_implements_alter(&$implementations, $hook) {
  //
  if ($hook == 'node_access') {
    $group = $implementations['c4m_public_access'];
    unset($implementations['c4m_public_access']);
    $implementations['c4m_public_access'] = $group;
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function c4m_public_access_views_default_views_alter(&$views) {
  $to_be_secured_views = array( 'c4m_overview_organisations' => 'access authenticated content',
                                'c4m_overview_topics' => 'access authenticated content',
                                'c4m_learning_content' => 'access authenticated content'
                                );
  foreach ($to_be_secured_views as $view_system_name => $view_permission) {
      if (isset($views[$view_system_name])) {
        $views[$view_system_name]->display['default']->display_options['access']['perm'] = $view_permission;
      }
  }
}

/**
 * Implements hook_default_page_manager_pages_alter().
 * For anonymous users we want to hide some sections.
 */
function c4m_public_access_default_page_manager_pages_alter(&$pages) {
  if (user_is_anonymous() && isset($pages['c4m_homepage'])) {
    // Make homepage accessible for anonymous users.
    $homepage_panel = &$pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2'];
    $homepage_panel->disabled = FALSE;
    // Disable the featured_block.
    $homepage_panel->conf['display']->content['new-e15ee274-a647-4920-85c1-4bb1286686f2']
                   ->shown = FALSE;
    // Disable the statistics.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-0611c655-1657-489e-a844-c6648460af7c']
                          ->shown = FALSE;

    // Hide the activity stream.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-b3476758-2767-4be2-b3ad-84697ac801c3']
                          ->shown = FALSE;
    // Hide the c4m_featured_groups
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-e00433dd-e5e5-4c05-8231-b4642b65f37f']
                          ->shown = FALSE;
    // Hide the c4m_featured_projects.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-21833ed8-d9c8-4bd3-a4fd-b3127b5351a1']
                          ->shown = FALSE;


  }
  elseif (isset($pages['c4m_homepage'])) {
    // Hide the c4m_features_homepage_newsletter for anonymous users.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_2']
                          ->conf['display']->content['new-916fa034-f4ff-45cd-8e79-f5b40fced21c']
                          ->shown = FALSE;
    // Hide the c4m_features_homepage_newsletter for authenticated users.
    $pages['c4m_homepage']->default_handlers['page_c4m_homepage_panel_context_4']
                          ->conf['display']->content['new-f61cbf35-3227-4724-bc91-c08f74fd7d45']
                          ->shown = FALSE;
  }

}

/**
 * Perform alterations to a custom block.
 *
 * Modules can implement hook_block_view_MODULE_DELTA_alter() to modify a
 * specific block, rather than implementing hook_block_view_alter().
 *
 **/
function c4m_public_access_block_view_c4m_features_header_c4m_header_menu_alter(&$data, $block){
  if (user_is_anonymous() && current_path() !== "access-denied-ecas") {
    $member_access = '/member_access';

    if (isset($_SERVER['HTTP_NGINX_REQUEST_URI'])) {
      $nginx_request_uri = preg_split('@/@', $_SERVER['HTTP_NGINX_REQUEST_URI'], NULL, PREG_SPLIT_NO_EMPTY);
      $member_access = '/' . $nginx_request_uri[0] . $member_access;
    }
    $data['content'] .= '<div id="member_access"><a href="' . $member_access . '">Member access</a></div>';
  }
}

function c4m_public_access_views_pre_build(&$view) {
  if (user_is_anonymous() && $view->name == "global_activity_stream_no_js_fallback") {
    $view->init_pager();
    $view->set_items_per_page('8');

  }
}

/**
 * Helper function for hiding / unhiding a menu item for anonymous users.
 *
 * @param string $menu_path
 *   the drupal path of the menu, node/node_id, eg 'node/1234'.
 * @param boolean $show_menu_item
 *   True to show it, False to hide it from anonymous users.
 *
 * @throws \Exception
 *   throws exception?
 */
function _c4m_public_access_show_hide_menu_item_for_anonymous_users($menu_path,$show_menu_item=False) {
  if (module_exists('menu_per_role')) {
    $menu_link_info = db_select('menu_links', 'ml')
      ->condition('ml.link_path', $menu_path)
      ->fields('ml', ['mlid', 'plid'])
      ->execute()
      ->fetchAll();

    if (!empty($menu_link_info)) {
      $link = [];
      $link['mlid'] = $menu_link_info[0]->mlid;

      // remove menu item
      if ($show_menu_item) {
        menu_per_role_menu_link_delete($link);
        return;
      }

      $roles = user_roles();
      $role_id = array_search("anonymous user", $roles);
      $fields = array('rids' => "", 'hrids' => "{$role_id}");

      $count = db_select('menu_per_role')
        ->condition('mlid', $link['mlid'])
        ->countQuery()
        ->execute()
        ->fetchField();
      if ($count == 0) {
        $fields['mlid'] = $link['mlid'];
        db_insert('menu_per_role')
          ->fields($fields)
          ->execute();
      }
      else {
        db_update('menu_per_role')
          ->fields($fields)
          ->condition('mlid', $link['mlid'])
          ->execute();
      }
      watchdog('info', 'C4M Public access - hidden the ScaleUp EU  menu item.', NULL, WATCHDOG_INFO);

      // Finally set the flag to rebuild the menu.
      variable_set('menu_rebuild_needed', TRUE);
    }
  }
  else {
      watchdog('warning', 'INSTALLER - menu_per_role module not enabled/found yet, ScaleUp EU  menu item not hidden', NULL, WATCHDOG_WARNING);
  }
}
